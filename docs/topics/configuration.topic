<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
    SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
    title="Configuration" id="configuration">

    <p>
        Optionally, you can publish the config file with:
    </p>
    <code-block lang="bash">
        php artisan vendor:publish --provider="%package-publisher-namespace%"
    </code-block>
    <p>
        This is the contents of the published `%config-filename%` file:
    </p>
    <code-block lang="php" src="https://raw.githubusercontent.com/Laravel-Lang/publisher/main/config/public.php" include-lines="18-"/>
    <chapter title="Aliases" id="aliases">
        <warning title="Note">
            <p>
                Please note that this is a different configuration file.
            </p>
            <p>
                The Laravel Framework does not allow configuration files to be merged on the fly when publishing,
                so this process must be done manually.
            </p>
        </warning>
        <p>
            If you need to use locale [aliases](packages-locales.topic), you can add the `aliases` key to the previously published
            configuration file (`%config-filename%`).
        </p>
        <p>
            Or you can publish if you haven’t done so before:
        </p>
        <code-block lang="bash">
            php artisan vendor:publish --provider="%package-locales-namespace%"
        </code-block>
        <p>
            This is the contents of the published `%config-filename%` file:
        </p>
        <code-block lang="php" src="https://raw.githubusercontent.com/Laravel-Lang/locales/main/config/public.php" include-lines="18-"/>
        <tip>
            <p>
                Why such difficulties?
            </p>
            <p>
                We don't want to turn the client's application into a garbage dump with many different files
                like `config/publisher.php`, `config/locales.php`, `config/laravel-lang.php`, etc.
            </p>
            <p>
                Therefore, we decided to use one configuration file for all our packages - this is `%config-filename%`.
            </p>
        </tip>
    </chapter>
    <chapter title="Alignment" id="alignment">
        <p>
            When updating files, all comments from the final files are automatically deleted.
            Unfortunately, [var_export](https://www.php.net/manual/en/function.var-export.php) does not know how to work with
            comments.
        </p>
        <p>
            Your file example:
        </p>
        <code-block lang="php">
            <![CDATA][
            // auth.php
            &laquo;?php

                return [
                /*
                |--------------------------------------------------------------------------
                | Authentication Language Lines
                |--------------------------------------------------------------------------
                |
                | The following language lines are used during authentication for various
                | messages that we need to display to the user. You are free to modify
                | these language lines according to your application's requirements.
                |
                */
                'failed'   => 'These credentials do not match our records 123456.',
                'throttle' => 'Too many login attempts. Please try again in :seconds seconds.',
                'foo'      => 'bar',
                ];
            ]]>
        </code-block>
        <p>
                An updated file like this:
        </p>
        <code-block lang="php">
            return [
    'failed'   => 'These credentials do not match our records.',
    'foo'      => 'bar',
    'throttle' => 'Too many login attempts. Please try again in :seconds seconds.',
];
        </code-block>
        <p>
            and example of `validation.php` file:
        </p>
        <code-block lang="php">
            // your file:
?php

return [
    /*
    |--------------------------------------------------------------------------
    | Validation Language Lines
    |--------------------------------------------------------------------------
    |
    | The following language lines contain the default error messages used by
    | the validator class. Some of these rules have multiple versions such
    | as the size rules. Feel free to tweak each of these messages here.
    |
    */
    'accepted'         => 'The :attribute must be accepted.',
    'active_url'       => 'The :attribute is not a valid URL.',

    // many rules

    'uuid'             => 'The :attribute must be a valid UUID.',
    /*
    |--------------------------------------------------------------------------
    | Custom Validation Language Lines
    |--------------------------------------------------------------------------
    |
    | Here you may specify custom validation messages for attributes using the
    | convention "attribute.rule" to name the lines. This makes it quick to
    | specify a specific custom language line for a given attribute rule.
    |
    */
    'custom' => [
        'name' => [
            'required' => 'Custom message 1',
            'string'   => 'Custom message 2',
        ],
    ],
    /*
    |--------------------------------------------------------------------------
    | Custom Validation Attributes
    |--------------------------------------------------------------------------
    |
    | The following language lines are used to swap our attribute placeholder
    | with something more reader friendly such as "E-Mail Address" instead
    | of "email". This simply helps us make our message more expressive.
    |
    */
    'attributes' => [
        'name' => 'Foo',
        'bar'  => 'Bar',
        'baz'  => 'Baz',
    ],
];
        </code-block>
        <p>
            This is what it will look like after the update:
        </p>
        <code-block lang="php">
            return [
    'accepted'   => 'The :attribute must be accepted.',
    'active_url' => 'The :attribute is not a valid URL.',

    // many rules

    'uuid'       => 'The :attribute must be a valid UUID.',
    'custom'     => [
        'name' => [
            'required' => 'Custom message 1',
            'string'   => 'Custom message 2',
        ],
    ],
    'attributes' => [
        'bar'        => 'Bar',
        'baz'        => 'Baz',
        'email'      => 'E-Mail address',
        'first_name' => 'First Name',
        'last_name'  => 'Last Name',
        'name'       => 'Name',
        'username'   => 'Nickname',
    ],
];
        </code-block>
    </chapter>
    <chapter title="Smart Punctuation" id="smart_punctuation">
        <p>
            When updating translation keys, you can also enable intelligent converts ASCII quotes, dashes, and ellipses to their
            Unicode.
        </p>
        <p>
            For example:
        </p>
        <code-block lang="json">
            {
    "Some": "\"It's super-configurable... you can even use additional extensions to expand its capabilities -- just like this one!\""
}
        </code-block>
        <p>
            Will result in files:
        </p>
        <code-block lang="json">
            {
    "Some": "“It’s super-configurable… you can even use additional extensions to expand its capabilities – just like this one!”"
}
        </code-block>
        <p>
            This option is enabled in the `%config-filename%` file:
        </p>
        <code-block lang="php">
            'smart_punctuation' => [
    'enable' => true,

    'common' => [
        'double_quote_opener' => '“',
        'double_quote_closer' => '”',
        'single_quote_opener' => '‘',
        'single_quote_closer' => '’',
    ],

    'locales' => [
        Locales::FRENCH->value => [
            'double_quote_opener' => '“',
            'double_quote_closer' => '”',
            'single_quote_opener' => '‘',
            'single_quote_closer' => '’',
        ],

        Locales::UKRAINIAN->value => [
            'double_quote_opener' => '«',
            'double_quote_closer' => '»',
            'single_quote_opener' => '‘',
            'single_quote_closer' => '’',
        ],
    ],
],
        </code-block>
        <p>
            You can also set different rules for any localization.
        </p>
        <p>
            By default, conversion is disabled.
        </p>
    </chapter>
</topic>
