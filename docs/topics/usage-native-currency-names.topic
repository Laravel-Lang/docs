<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
    SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
    title="Currency Names" id="usage-native-currency-names">

<note>
    If you want to get a localized list of currencies, then simply call the `Native::get()` method from
    the <a href="packages-native-currency-names.topic">`%package-native-currency-names%`</a> package.
</note>
    <chapter title="Localized Names" id="localized_names">
        <code-block lang="php">

    
use LaravelLang\NativeCurrencyNames\Native;
use LaravelLang\LocaleList\Locale;

return Native::get('bn');
// or
return Native::get(Locale::Bengali)
        </code-block>
        <p>
            Result:
        </p>
        <code-block lang="php">

    
array:79 [
  "af" => LaravelLang\NativeCurrencyNames\Data\CurrencyData {
    +locale: "af"
    +country: "ZA"
    +code: "ZAR"
    +numeric: 710
    +name: "South African Rand"
    +native: "Suid-Afrikaanse rand"
    +localized: "দক্ষিণ আফ্রিকান রেন্ড"
  }
  "sq" => LaravelLang\NativeCurrencyNames\Data\CurrencyData {
    +locale: "sq"
    +country: "AL"
    +code: "ALL"
    +numeric: 8
    +name: "Albanian Lek"
    +native: "Leku shqiptar"
    +localized: "আলবেনিয়ান লেক"
  }
  "ar" => LaravelLang\NativeCurrencyNames\Data\CurrencyData {
    +locale: "ar"
    +country: "EG"
    +code: "EGP"
    +numeric: 818
    +name: "Egyptian Pound"
    +native: "جنيه مصري"
    +localized: "মিশরীয় পাউন্ড"
  }
  // ...
]
        </code-block>
    </chapter>
    <chapter title="Native Names" id="native_names">
        <p>

            You can also get a list of localized names if you call the `get` method without passing parameters.
            The same thing will happen if you pass an incorrect or empty value to the parameter.
        </p>
        <code-block lang="php">

    
use LaravelLang\NativeCurrencyNames\Native;

return Native::get();
// or
return Native::get('');
// or
return Native::get(null);
// or
return Native::get('foo');
        </code-block>
        <p>
            Result:
        </p>
        <code-block lang="php">

    
array:79 [
  "af" => LaravelLang\NativeCurrencyNames\Data\CurrencyData {
    +locale: "af"
    +country: "ZA"
    +code: "ZAR"
    +numeric: 710
    +name: "South African Rand"
    +native: "Suid-Afrikaanse rand"
    +localized: "Suid-Afrikaanse rand"
  }
  "sq" => LaravelLang\NativeCurrencyNames\Data\CurrencyData {
    +locale: "sq"
    +country: "AL"
    +code: "ALL"
    +numeric: 8
    +name: "Albanian Lek"
    +native: "Leku shqiptar"
    +localized: "Leku shqiptar"
  }
  "ar" => LaravelLang\NativeCurrencyNames\Data\CurrencyData {
    +locale: "ar"
    +country: "EG"
    +code: "EGP"
    +numeric: 818
    +name: "Egyptian Pound"
    +native: "جنيه مصري"
    +localized: "جنيه مصري"
  }
  // ...
]
        </code-block>
    </chapter>
    <chapter title="Sorting" id="sorting">
        <p>

            To get the result sorted by key or value, pass `SortBy` to the enum parameter.
        </p>
        <p>

            By default, sorting by values is applied.
        </p>
        <chapter title="Sort by keys" id="sort_by_keys">
            <code-block lang="php">

    
use LaravelLang\NativeCurrencyNames\Native;
use LaravelLang\NativeCurrencyNames\Enums\SortByy;

return Native::get('en', SortBy::Key);
            </code-block>
            <p>
                Result:
            </p>
            <code-block lang="php">

    
array:79 [
  "af" => LaravelLang\NativeCurrencyNames\Data\CurrencyData {
    +locale: "af"
    +country: "ZA"
    +code: "ZAR"
    +numeric: 710
    +name: "South African Rand"
    +native: "Suid-Afrikaanse rand"
    +localized: "South African Rand"
  }
  "sq" => LaravelLang\NativeCurrencyNames\Data\CurrencyData {
    +locale: "sq"
    +country: "AL"
    +code: "ALL"
    +numeric: 8
    +name: "Albanian Lek"
    +native: "Leku shqiptar"
    +localized: "Albanian Lek"
  }
  "ar" => LaravelLang\NativeCurrencyNames\Data\CurrencyData {
    +locale: "ar"
    +country: "EG"
    +code: "EGP"
    +numeric: 818
    +name: "Egyptian Pound"
    +native: "جنيه مصري"
    +localized: "Egyptian Pound"
  }
  // ...
]
            </code-block>
        </chapter>
        <chapter title="Sort by values" id="sort_by_values">
            <code-block lang="php">

    
use LaravelLang\NativeCurrencyNames\Native;
use LaravelLang\NativeCurrencyNames\Enums\SortByy;

return Native::get('en', SortBy::Value);
// or
return Native::get('en');
            </code-block>
            <p>
                Result:
            </p>
            <code-block lang="php">

    
array:79 [
  "af" => LaravelLang\NativeCurrencyNames\Data\CurrencyData {
    +locale: "af"
    +country: "ZA"
    +code: "ZAR"
    +numeric: 710
    +name: "South African Rand"
    +native: "Suid-Afrikaanse rand"
    +localized: "South African Rand"
  }
  "sq" => LaravelLang\NativeCurrencyNames\Data\CurrencyData {
    +locale: "sq"
    +country: "AL"
    +code: "ALL"
    +numeric: 8
    +name: "Albanian Lek"
    +native: "Leku shqiptar"
    +localized: "Albanian Lek"
  }
  "ar" => LaravelLang\NativeCurrencyNames\Data\CurrencyData {
    +locale: "ar"
    +country: "EG"
    +code: "EGP"
    +numeric: 818
    +name: "Egyptian Pound"
    +native: "جنيه مصري"
    +localized: "Egyptian Pound"
  }
  // ...
]
            </code-block>
        </chapter>
    </chapter>
</topic>
