<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
    SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
    title="Country Names" id="usage-native-country-names">

    <link-summary>Information on working with the list of localized country names</link-summary>
    <card-summary>Information on working with the list of localized country names</card-summary>
    <web-summary>Information on working with the list of localized country names</web-summary>

    <note>
        If you want to get a localized list of countries, then simply call the <code>CountryNames::get()</code> method from
        the <a href="packages-native-country-names.topic"><code>%package-native-country-names%</code></a> package.
    </note>

    <chapter title="Localized Names" id="localized_names">
        <code-block lang="php" validate="true">
            use LaravelLang\NativeCountryNames\CountryNames;
            use LaravelLang\LocaleList\Locale;

            return CountryNames::get('bn');
            // or
            return CountryNames::get(Locale::Bengali)
        </code-block>

        <p>
            Result:
        </p>

        <code-block lang="php" validate="true" src="usage-native-country-names-localized-names.txt" />
    </chapter>

    <chapter title="Native Names" id="native_names">
        <p>
            You can also get a list of localized names if you call the
            <code>get</code> method without passing parameters.
            The same thing will happen if you pass an incorrect or empty value to the parameter.
        </p>

        <code-block lang="php" validate="true">
            use LaravelLang\NativeCountryNames\CountryNames;

            return CountryNames::get();
            // or
            return CountryNames::get('');
            // or
            return CountryNames::get(null);
            // or
            return CountryNames::get('foo');
        </code-block>

        <p>
            Result:
        </p>

        <code-block lang="php" validate="true" src="usage-native-country-names-native-names.txt" />
    </chapter>

    <chapter title="Sorting" id="sorting">
        <p>
            To get the result sorted by key or value, pass <code>SortBy</code> to the enum parameter.
        </p>
        <p>
            By default, sorting by values is applied.
        </p>

        <chapter title="Sort by keys" id="sort_by_keys">
            <p>
                use LaravelLang\NativeCountryNames\CountryNames;
                use LaravelLang\NativeCountryNames\Enums\SortBy;

                return CountryNames::get('en', SortBy::Key);
            </p>

            <p>
                Result:
            </p>

            <code-block lang="php" validate="true" src="usage-native-country-names-sort-by-keys.txt" />

        </chapter>
        <chapter title="Sort by values" id="sort_by_values">
            <code-block lang="php" validate="true">
                use LaravelLang\NativeCountryNames\CountryNames;
                use LaravelLang\NativeCountryNames\Enums\SortBy;

                return CountryNames::get('en', SortBy::Value);
                // or
                return CountryNames::get('en');
            </code-block>

            <p>
                Result:
            </p>
            <code-block lang="php" validate="true" src="usage-native-country-names-sort-by-values.txt" />
        </chapter>
    </chapter>
</topic>
