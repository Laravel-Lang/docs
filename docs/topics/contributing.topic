<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
    SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
    title="Contributing" id="contributing">

    <p>
        Contributions are **welcome** and will be fully **credited**.
    </p>
    <p>
        We accept contributions through Pull Requests on [all projects](https://github.com/orgs/Laravel-Lang/repositories) of
        our organization.
    </p>
    <chapter title="How can I add localization?" id="how_can_i_add_localization_">
        <list>
            <li>Fork the desired
                repository ([Lang](https://github.com/Laravel-Lang/lang), [Attributes](https://github.com/Laravel-Lang/attributes)
                or [HTTP Statuses](https://github.com/Laravel-Lang/http-statuses));</li>
            <li>Make sure you have [PHP 8.1](https://www.php.net) or higher installed on your computer;</li>
            <li>Install dependencies by running console command:
                ```bash
                composer update
                ```</li>
            <li>Call the console command, passing in the argument the name of the localization to be added. Localization code must
                comply
                with [ISO-15897](https://laravel.com/docs/localization)
                and [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (ex: `fr` for French):
                ```bash
                vendor/bin/lang create fr
                ```</li>
            <li>This command will create all the necessary files and fill them with initial data. The files will be located in
                the `locales/{locale}` directory;</li>
            <li>Keep in mind that the `*-inline.json` files does not come with Laravel and the idea of this file is not to put a
                specific name to each attribute (as in `validation.php`)
                but a generic name for the validation attributes. Therefore in the translations of this file the
                placeholder `:attribute` **should not** appear.</li>
            <li>Add a pull request with the name of the language. For example:

                > [fr]: Added new localization</li>
        </list>
    </chapter>
    <chapter title="How can I fix the file?" id="how_can_i_fix_the_file_">
        <list>
            <li>Fork the desired
                repository ([Lang](https://github.com/Laravel-Lang/lang), [Attributes](https://github.com/Laravel-Lang/attributes)
                or [HTTP Statuses](https://github.com/Laravel-Lang/http-statuses));</li>
            <li>Update the files;

                > Note that in inline files (`json-inline.json` and `php-inline.json`), keys are the "non-inline" option.
                >
                > For example:
                > ```json
                > {
                >   "The :attribute must be at least :length characters.": "This field must be at least :length characters."
                > }
                > ```</li>
            <li>Add a pull request with the name of the language

                > ex: [fr]: Updated translations</li>
        </list>
    </chapter>
    <chapter title="What is the difference between 'inline' files and 'non-inline' files?" id="what_is_the_difference_between_inline_files_and_non_inline_files_">
    <list>
        <li>**php.json** - contains translations of values for PHP localization files.</li>
        <li>**php-inline.json** - contains inline translations of values for PHP localization files.</li>
        <li>**json.json** - contains translations of values for JSON localization files.</li>
        <li>**json-inline.json** - contains inline translations of values for JSON localization files.</li>
    </list>
    <p>
        At the same time, the Laravel Framework itself also contains JSON keys:
    </p>
        <list>
            <li>[laravel/framework/src/Illuminate/Auth/Notifications/VerifyEmail.php](https://github.com/laravel/framework/blob/082345d76fc6a55b649572efe10b11b03e279d24/src/Illuminate/Auth/Notifications/VerifyEmail.php#L65-L68)</li>
            <li>[Laravel-Lang/lang/source/framework/10.x/framework.json](https://github.com/Laravel-Lang/lang/blob/979db1554ad5708e5d4fc8a48d6312fbd6cfa03e/source/framework/10.x/framework.json)</li>
        </list>
        <p>
            At the same time, the project structure is not tied to specific packages or files. For example,
            the [Laravel-Lang/http-statuses](https://github.com/Laravel-Lang/http-statuses)
            project contains translations of statuses, while [Laravel-Lang/attributes](https://github.com/Laravel-Lang/attributes)
            contains attributes for validation files.
        </p>
        <p>
            Using the [template](https://github.com/Laravel-Lang/translations-template), you can create any project with any
            translation keys.
        </p>
        <p>
            This file structure allows you to support translation for several product versions at once.
            For example, [Jetstream](https://github.com/Laravel-Lang/lang/tree/main/source/jetstream) 1.x, 2.x, 3.x and dev
            versions.
        </p>
    </chapter>
    <chapter title="What should I do if there is a tag whose translation is the same as in English?" id="what_should_i_do_if_there_is_a_tag_whose_translation_is_the_same_as_in_english_">
        <p>
            In some languages there are some strings whose translation is the same as in English. In this case, the script that
            generates the [status](statuses.md) adds them by default to the
            list of pending translations. This affects the *completion status* for this language which would never be marked in
            *status list* with (
            ) but with () even if all other strings were translated.
        </p>
        <p>
            We can avoid this situation in the following way:
        </p>
        <list>
            <li>Fork this repository if you haven't already;</li>
            <li>Create a `_excludes.json` file in the localization folder if it doesn't already exist;</li>
            <li>This file contains an array of values for each exception.
                > For example, we need to exclude Micronesia from the status check for Italian:
                >
                > _locales/it/json.json_:
                > ```json
                > {
                >     "Micronesia, Federated States Of": "Micronesia"
                > }
                > ```

                > _locales/it/\_excludes.json_:
                > ```json
                > [
                >     "Micronesia"
                > ]
                > ```</li>
            <li>Add these changes to the pull request you will send.</li>
        </list>
        <p>

        </p>
    </chapter>
</topic>
