<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
    SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
    title="Models" id="packages-models">

    <show-structure depth="3" />

    <link-summary>Easy and fast way to localize models</link-summary>
    <card-summary>Easy and fast way to localize models</card-summary>
    <web-summary>Easy and fast way to localize models</web-summary>

    <warning>
        <p>
            The <code>%repository-title-models%</code> project is in
            <format style="bold">beta</format>
            testing.
        </p>
        <p>
            Use in production is highly discouraged until it is released into a stable version.
        </p>
        <p>
            Documentation will also be updated frequently to reflect changes in the project.
        </p>
    </warning>

    <chapter title="Installation" id="installation">
        <link-summary>Installation information for the %package-models% package</link-summary>

        <note>
            The compatibility table can be viewed <a href="#compatibility">here</a>.
        </note>

        <p>
            To install, run the console command:
        </p>

        <code-block lang="bash">
            %install-models%
        </code-block>

        You can also
        <a href="configuration.topic#models">change</a>
        the default settings by making changes to the <code>%config-filename%</code> file.
    </chapter>

    <chapter title="Console Commands" id="console_commands">
        <link-summary>Information about the console commands of the %repository-title-models% package.</link-summary>

        <chapter title="Create Translation Model" id="create_translation_model">
            <p>
                The storage is optimized for storing large volumes of data without mixing them with each other.
                Thus, for each model that requires translations, its own model is created.
            </p>
            <p>
                The easiest way to create a repository is to use the
                <code>%command-models-make-storage-simple%</code> console command:
            </p>

            <code-block lang="bash">
                %command-models-make-storage%
            </code-block>

            <p>
                When executed, you will be asked for a source model and, if it does not exist, it will be created.
                After this, they will ask questions about the columns to create. For example, "title", "description", etc.
            </p>
            <p>
                Don't worry if you added extra columns or didn't add them at all - the console command will generate
                a model file and its migration, in which you can make the necessary changes.
            </p>
            <p>
                The created storage model will and should always be next to the parent model. For example:
            </p>

            <code-block>
                App\Models\Content\News
                App\Models\Content\NewsTranslation
                App\Models\Products\Category
                App\Models\Products\CategoryTranslation
            </code-block>

            <tip>
                The default suffix is <code>Translation</code>, but you can replace it with your own in the
                <code>models</code> section of the
                <a href="configuration.topic#models">%config-filename%</a> settings file.
            </tip>

            <p>
                After this, all that remains is to start the migration by calling the console command:
            </p>

            <code-block lang="bash">
                php artisan migrate
            </code-block>

            <chapter title="Options" id="options">
                <deflist type="narrow">
                    <def title="model">
                        <p>
                            Points to the name of the parent model for which the repository is to be created.
                        </p>
                        <p>
                            For example:
                        </p>
                        <code-block lang="bash">
                            %command-models-make-storage% Page
                            # or
                            %command-models-make-storage% App\Models\Page
                        </code-block>
                    </def>
                    <def title="--columns">
                        <p>
                            The parameter can contain one or more values and contains a list of columns to be added.
                        </p>
                        <p>
                            For example:
                        </p>
                        <code-block lang="bash">
                            --columns=title --columns=description
                        </code-block>
                        <code-block lang="php">
                            Artisan::call('%command-models-make-storage-simple%', [
                                '--columns' => ['title', 'description'],
                            ]);
                        </code-block>
                    </def>
                </deflist>
            </chapter>
        </chapter>

        <chapter title="Model Setup" id="model_setup">
            <p>
                After creating the translation repository,
                you need to connect the <code>LaravelLang\Models\HasTranslations</code> trait to the main model.
            </p>
            <p>
                For example:
            </p>

            <code-block lang="php" src="models-usage-base-model.php" include-lines="5-" />

            <p>
                Also ensure that the base model does not contain physical or virtual fields used for translations.
            </p>
            <p>
                For example:
            </p>

            <code-block lang="php" src="models-usage-conflict-fields.php" include-lines="5-" />
        </chapter>

        <chapter title="IDE helpers" id="ide_helpers">
            <p>
                To help your IDE work with translatable fields, we recommend running the console command:
            </p>

            <code-block lang="bash">
                %command-models-make-helpers%
            </code-block>

            <p>
                This will create helper files that will allow the IDE to “recognize” the fields. For example:
            </p>

            <tabs>
                <tab title="After">
                    <img src="models-helper-after.png" alt="wit helper" />
                </tab>
                <tab title="Before">
                    <img src="models-helper-before.png" alt="without helper" />
                </tab>
            </tabs>

            <p>
                You can also change the path to the directory for storing these files in the
                <code>helpers</code> parameter of the <code>models</code> section of the
                <a href="configuration.topic#models">%config-filename%</a> settings file.
                Make sure the new path is indexed by your IDE.
            </p>
        </chapter>
    </chapter>

    <chapter title="Usage" id="usage">
        <link-summary>Usage information for the %repository-title-models% package</link-summary>

        <include from="library-models.topic" element-id="ensure_locale_installed" />

        <chapter title="Get Translation" id="get_translation">
            <tip>
                All repository stores automatically propagate the
                <a href="https://laravel.com/docs/eloquent-relationships#eager-loading">eager loading</a>
                flag to the parent model, so there is no need to do this manually.
            </tip>

            <p>
                To get the value of a property for the current localization,
                simply make a call to the model property. For example:
            </p>

            <code-block lang="php" src="models-usage-get-translation.php" include-lines="5,7-10" />

            <p>
                If the value of the
                <tooltip term="package-models-app-main-config-place">main locale</tooltip>
                is missing, the method will return the value of the
                <tooltip term="package-models-app-fallback-config-place">fallback locale</tooltip>
                .
            </p>

            <p>
                You can also use the <code>getTranslation</code> method:
            </p>

            <code-block lang="php" src="models-usage-get-translation.php" include-lines="5,7-8,11-12" />

            <p>
                To get a value for a specific locale, pass the localization code as the second argument.
                For example:
            </p>

            <code-block lang="php" src="models-usage-get-translation.php" include-lines="5,7-8,13-16" />

            <tip>
                Even if the model contains changes that were not written to the database, these methods will return this value.
            </tip>
        </chapter>

        <chapter title="Set Translations" id="set_translations">
            <chapter title="Single value" id="single_value">
                <p>
                    To add or update a translation to your application's current locale, simply assign a value to the model property.
                    For example:
                </p>

                <code-block lang="php" src="models-usage-create-translation.php" include-lines="5,7-10" />

                <p>
                    You can also set a new value using the <code>setTranslation</code> method:
                </p>

                <code-block lang="php" src="models-usage-create-translation.php" include-lines="5,7-8,11-12" />

                <p>
                    These methods will set a new value to the currently active locale.
                    To set the value to a specific locale, pass its code as the third parameter in this method.
                    For example:
                </p>

                <code-block lang="php" src="models-usage-create-translation.php" include-lines="5-8,13-16" />

                <p>
                    It is also possible to use mass filling:
                </p>

                <code-block lang="php" src="models-usage-create-translation.php" include-lines="5,7-8,17-20" />

                <note>
                    <p>
                        Please note that despite calling these methods, the new values will be stored to the model objects.
                        To write changes to the database, simply call the <code>save</code> method on the parent model.
                        For example:
                    </p>

                    <code-block lang="php" src="models-usage-create-translation.php" include-lines="22" />
                </note>

                <p>
                    Of course, filling can also be done when creating the model. For example:
                </p>

                <code-block lang="php" src="models-usage-create-translation.php" include-lines="5,7-8,23-26" />
            </chapter>

            <chapter title="Plural value" id="plural_value">
                <p>
                    If you need to quickly fill a property with translations from several localizations,
                    you can use any of the following ways:
                </p>
            </chapter>

            <code-block lang="php" src="models-usage-set-translation-plural.php" include-lines="5-32" />

            <p>
                You can also assign <code>iterable</code> objects when bulk populating. For example:
            </p>

            <code-block lang="php" src="models-usage-set-translation-plural.php" include-lines="34-42" />

            <p>
                Please note that there is no strict need to indicate exact locations for each of the fields.
                For example, the example above will populate the
                <code>title</code> field for French, English, and German, while the
                <code>description</code> field will only set values for French and German.
            </p>
        </chapter>

        <chapter title="Forget Translation" id="forget_translation">
            <warning>
                <p>
                    Unlike <a href="#set_translations">add and update</a> methods, the
                    <code>forgetTranslation</code> and
                    <code>forgetAllTranslations</code> method immediately makes changes to the database by calling the
                    <code>delete</code> method on the translation model.
                </p>
                <p>
                    By default, the translation model does not contain the
                    <a href="https://laravel.com/docs/eloquent#soft-deleting">SoftDeletes</a> trait, so the data is deleted immediately.
                    If desired, you can add them yourself to the model class and migration file.
                </p>
            </warning>

            <code-block lang="php" src="models-usage-forget-translation.php" include-lines="5,7-12" />

            <p>
                You can also remove all localizations at once by calling the <code>forgetAllTranslations</code> method.
            </p>

            <code-block lang="php" src="models-usage-forget-translation.php" include-lines="5,7-8,13-14" />
        </chapter>

        <chapter title="Has Translated" id="has_translated">
            <p>
                There are several ways to check if a column has a translation.
                The first is to call the <code>hasTranslated</code> method, passing the column name as a parameter.
            </p>

            <code-block lang="php" src="models-usage-has-translation.php" include-lines="5,7-10" />

            <p>
                This method checks both the
                <tooltip term="package-models-app-main-config-place">main</tooltip>
                and
                <tooltip term="package-models-app-fallback-config-place">fallback</tooltip>
                locales.
                Returns <code>true</code> if one of the values is filled or <code>false</code> if both are empty.
            </p>

            <note>
                Please note that stored boolean values (<code>true / false</code>) as well as numeric values
                (<code>0, 0.0</code>) are considered complete and will return <code>true</code>.
            </note>

            <p>
                If you need to check for the presence of a value for a specific localization,
                pass its code as the second argument.
                For example:
            </p>

            <code-block lang="php" src="models-usage-has-translation.php" include-lines="5-8,11-14" />
        </chapter>

        <chapter title="Is Translatable" id="is_translatable">
            <p>
                The <code>isTranslatable</code> method checks for the presence of a field in the
                <code>$fillable</code> Translate property of the model.
            </p>
            <p>
                For example:
            </p>

            <code-block lang="php" src="models-usage-is-translation.php" include-lines="5-" />
        </chapter>

        <chapter title="Delete Base Model" id="delete_base_model">
            <p>
                By default, the translation model contains a foreign link to the parent model.
                Therefore, if it is softly deleted using the
                <a href="https://laravel.com/docs/eloquent#soft-deleting">SoftDeletes</a> trait,
                all translations will remain in their places, but when the
                <code>forceDelete</code> method is called, the translations will be automatically deleted from the database.
            </p>

            <code-block lang="php" src="models-usage-delete-base-model.php" include-lines="5-" />
        </chapter>
    </chapter>

    <chapter title="Events" id="events">
        <p>
            When certain actions are performed, the following events will be triggered:
        </p>

        <code-block lang="php" src="models-usage-events.php" include-lines="5-" />

        <p>
            If necessary, you can listen to this event. For example:
        </p>

        <code-block lang="php" src="models-usage-events-listen.php" include-lines="5-" />
    </chapter>

    <chapter title="Compatibility" id="compatibility">
        <link-summary>Compatibility table for the %repository-title-models% package</link-summary>

        <table>
            <tr>
                <td>Laravel</td>
                <td>PHP</td>
                <td>Package</td>
                <td>Status</td>
            </tr>
            <tr>
                <td>11.4+</td>
                <td>8.2, 8.3</td>
                <td><code>^1.0</code></td>
                <td><img src="%badge-supported%" alt="supported" /></td>
            </tr>
        </table>
    </chapter>
</topic>
