<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
    SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
    title="Models" id="packages-models">

    <show-structure depth="2" />

    <link-summary>Information on using the %repository-title-models% package</link-summary>
    <card-summary>Information on using the %repository-title-models% package</card-summary>
    <web-summary>Information on using the %repository-title-models% package</web-summary>

    <warning>
        <p>
            The <code>%repository-title-models%</code> project is in
            <format style="bold">beta</format>
            testing.
        </p>
        <p>
            Use in production is highly discouraged until it is released into a stable version.
        </p>
        <p>
            Documentation will also be updated frequently to reflect changes in the project.
        </p>
    </warning>

    <chapter title="Installation" id="installation">
        <link-summary>Installation information for the %package-models% package</link-summary>

        <note>
            The compatibility table can be viewed <a href="#compatibility">here</a>.
        </note>

        <p>
            To install, run the console command:
        </p>

        <code-block lang="bash">
            %install-models%
        </code-block>

        You can also
        <a href="configuration.topic#models">change</a>
        the default settings by making changes to the <code>%config-filename%</code> file.
    </chapter>

    <chapter title="Console Commands" id="console_commands">
        <chapter title="Create Translation Model" id="create_translation_model">
            <p>
                The storage is optimized for storing large volumes of data without mixing them with each other.
                Thus, for each model that requires translations, its own model is created.
            </p>
            <p>
                The easiest way to create a repository is to use the
                <code>%command-models-make-storage-simple%</code> console command:
            </p>

            <code-block lang="bash">
                %command-models-make-storage%
            </code-block>

            <p>
                When executed, you will be asked for a source model and, if it does not exist, it will be created.
                After this, they will ask questions about the columns to create. For example, "title", "description", etc.
            </p>
            <p>
                Don't worry if you added extra columns or didn't add them at all - the console command will generate
                a model file and its migration, in which you can make the necessary changes.
            </p>
            <p>
                The created storage model will and should always be next to the parent model. For example:
            </p>

            <code-block>
                App\Models\Content\News
                App\Models\Content\NewsTranslation
                App\Models\Products\Category
                App\Models\Products\CategoryTranslation
            </code-block>

            <tip>
                The default suffix is <code>Translation</code>, but you can replace it with your own in the
                <code>models</code> section of the
                <a href="configuration.topic#models">%config-filename%</a> settings file.
            </tip>

            <p>
                After this, all that remains is to start the migration by calling the console command
                <code>php artisan migrate</code>.
            </p>

            <chapter title="Command Options" id="command_options">
                <deflist type="narrow">
                    <def title="model">
                        <p>
                            Points to the name of the parent model for which the repository is to be created.
                        </p>
                        <p>
                            For example:
                        </p>
                        <code-block lang="bash">
                            %command-models-make-storage% Page
                            # or
                            %command-models-make-storage% App\Models\Page
                        </code-block>
                    </def>
                    <def title="--columns">
                        <p>
                            The parameter can contain one or more values and contains a list of columns to be added.
                        </p>
                        <p>
                            For example:
                        </p>
                        <code-block lang="bash">
                            --columns=title --columns=description
                        </code-block>
                        <code-block lang="php">
                            Artisan::call('%command-models-make-storage-simple%', [
                                '--columns' => ['title', 'description'],
                            ]);
                        </code-block>
                    </def>
                </deflist>
            </chapter>
        </chapter>

        <chapter title="Helper Files for IDE" id="helper_files_for_ide">
            <p>
                To help your IDE work with translatable fields, we recommend running the console command:
            </p>

            <code-block lang="bash">
                php artisan lang:models:helper
            </code-block>

            <p>
                This will create helper files that will allow the IDE to “recognize” the fields. For example:
            </p>

            <tabs>
                <tab title="After">
                    <img src="models-helper-after.png" alt="wit helper" />
                </tab>
                <tab title="Before">
                    <img src="models-helper-before.png" alt="without helper" />
                </tab>
            </tabs>

            <p>
                You can also change the path to the directory for storing these files in the
                <code>helpers</code> parameter of the <code>models</code> section of the
                <a href="configuration.topic#models">%config-filename%</a> settings file.
                Make sure the new path is indexed by your IDE.
            </p>
        </chapter>
    </chapter>

    <chapter title="Usage" id="usage">
        <link-summary>Usage information for the %repository-title-models% package</link-summary>

        <chapter title="Model Setup" id="model_setup">
            TODO: Here will be information on setting up the basic model
        </chapter>

        <chapter title="Create Translation" id="create_translation">
            TODO: Here you will find information about adding a translation.
        </chapter>

        <chapter title="Update Translation" id="update_translation">
            <p>
                TODO:
            </p>
            <list>
                <li>Information about what will happen if you
                    <format style="bold">do not</format>
                    save the base object
                </li>
                <li>Information about what will happen if you save the base object</li>
            </list>
        </chapter>

        <chapter title="Get Translation" id="get_translation">
            TODO
        </chapter>

        <chapter title="Has Translated" id="has_translated">
            TODO
        </chapter>

        <chapter title="Is Translatable" id="is_translatable">
            TODO
        </chapter>

        <chapter title="Forget Translation" id="forget_translation">
            TODO: Here you will find information about deleting translations from the database.
        </chapter>

        <chapter title="Delete Base Model" id="delete_base_model">
            TODO: Here will be information about deleting the base model (foreign connection).
        </chapter>
    </chapter>

    <chapter title="Events" id="events">
        <p>
            When certain actions are performed, the following events will be triggered:
        </p>

        <code-block lang="php">
            use LaravelLang\Models\Events\AllTranslationsHasBeenForgetEvent;
            use LaravelLang\Models\Events\TranslationHasBeenForgetEvent;
            use LaravelLang\Models\Events\TranslationHasBeenSetEvent;

            AllTranslationsHasBeenForgetEvent::dispatch($model);
            TranslationHasBeenForgetEvent::dispatch($model, $locale);
            TranslationHasBeenSetEvent::dispatch($model, $column, $locale, $oldValue, $newValue);
        </code-block>

        <p>
            If necessary, you can listen to this event. For example:
        </p>

        <code-block lang="php" src="packages-models-events-listen.php" include-lines="5-" />
    </chapter>

    <chapter title="Compatibility" id="compatibility">
        <link-summary>Compatibility table for the %repository-title-models% package</link-summary>

        <table>
            <tr>
                <td>Laravel</td>
                <td>PHP</td>
                <td>Package</td>
                <td>Status</td>
            </tr>
            <tr>
                <td>11.4+</td>
                <td>8.2, 8.3</td>
                <td><code>^1.0</code></td>
                <td><img src="%badge-supported%" alt="supported" /></td>
            </tr>
        </table>
    </chapter>
</topic>
